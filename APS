/*APS 1 – Programação Estruturada
Professor: Sérgio Assunção Monteiro
Nome da disciplina: Programação Estruturada
Código da Turma: 931
Nome do aluno: Neemias Gomes do Patrocinio.
Matrícula: 2022100554
unidade: Meier V
*/
#include <stdio.h>
#include <stdlib.h>
#define N 10
#define cont 5
void entrada_dados(int x[]);
void imprimir_vetor(int x[]);
int somar(int posicao, int x[]);
int maior(int x[]);
int  ehPar ( int num);
int main(){
	int vet_1[N]; 
    int vet_2[N];
	int vet_3[N];
	int vet_4[N];
	int vet_5[N];       
    int soma_num;
 // ":::::::::::::::::::::::::::::APS:::::::::::::::::::::::::::::::::::"
 //1. Criar 5 vetores contendo 10 valores inteiros gerados aleatoriamente 
  printf("\nPrimeiro vetor");
    entrada_dados(vet_1);
    imprimir_vetor(vet_1);
 // "::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::" 
  printf("\n\nSegundo vetor");
     entrada_dados(vet_2);
    imprimir_vetor(vet_2);
 // "::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::"
    printf("\n\nTerceiro vetor");
     entrada_dados(vet_3);
    imprimir_vetor(vet_3);
 //"::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::" 
    printf("\n\nQuarto vetor");
     entrada_dados(vet_4);
    imprimir_vetor(vet_4);
  //"::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::"  
    printf("\n\nQuinto vetor");
     entrada_dados(vet_5);
    imprimir_vetor(vet_5);
  //"::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::" 
     
	
    printf("\nO 1 - resultado eh: [%d].\n",somar(N-1, vet_1));
    printf("\nO 1 - maior eh: [%d].\n",maior(vet_1));
    printf("\nO 2 - resultado eh: [%d].\n",somar(N-1, vet_2));
    printf("\nO 2 - maior eh: [%d].\n",maior(vet_2));
 		printf("\nO 3 - resultado eh: [%d].\n",somar(N-1, vet_3));
    printf("\nO 3 - maior eh: [%d].\n",maior(vet_3));
    printf("\nO 4 - resultado eh: [%d].\n",somar(N-1, vet_4));
    printf("\nO 4 - maior eh: [%d].\n",maior(vet_4));
    printf("\nO 5 - resultado eh: [%d].\n",somar(N-1, vet_5));
    printf("\nO 5 - maior eh: [%d].\n",maior(vet_5));
}
 
void entrada_dados(int x[]){
    int i;
    for(i=0;i<N;i++){
    x[i]=rand() % 100;        
    }
}
 
void imprimir_vetor(int x[]){
    int i;
    for(i=0;i<N;i++){    
        printf("\nvetor[%i] = %i",i,x[i]);        
    }
}
int  ehPar ( int num){
	if (num% 2 == 0 ){
	  return  1 ;
	}
	return  0 ;
}
//2. Utilizar uma função recursiva para somar apenas os elementos pares de cada vetor;

int somar(int posicao, int x[]){
	int r;

    if(posicao==0){
        return ehPar (x[ 0 ])?x[ 0 ]: 0 ;
      }
    
   r = ehPar (x[posicao])?x[posicao]: 0 ;
  return r+somar(posicao-1,x);
  
}

//3. Retornar maior elemento do item 2;
int maior(int x[]){
int i,r;

for (i=0;i<N;i++)
if (x[i]>r){
r=x[i]; 
}
return r;
}
